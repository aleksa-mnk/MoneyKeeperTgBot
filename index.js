// –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —è –ø–µ—Ä–µ–ø–∏—à—É —ç—Ç–æ—Ç –≥–æ–≤–Ω–æ–∫–æ–¥ :(
// –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã, —ç—Ç –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤–æ –º–Ω–µ, –∞ –≤ Heroku..

const TelegramApi = require('node-telegram-bot-api')
const { GoogleSpreadsheet } = require('google-spreadsheet')
require('dotenv').config()
const axios = require("axios")
const { filterRate, defaultRates, ratesToString, formatDate, formatToStandartDate } = require('./getrate')
const { defaultOpts, rateOpts, settingsOpts, startOpts, categoryOpts, statisticOpts, deletecategoryOpts, renamecategoryOpts, isEmpty } = require('./options')
const { start, shortStart, settings } = require('./answers')

const token = process.env.API_KEY_BOT_TOKEN
const adminId = process.env.ADMIN_CHAT_ID
const moneyKeepEmail = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL
const moneyKeepKey = process.env.GOOGLE_PRIVATE_KEY
const sheetId = process.env.GOOGLE_SHEET_ID

const bot = new TelegramApi(token, { polling: true })
const doc = new GoogleSpreadsheet(sheetId)

bot.setMyCommands([
    { command: '/rate', description: '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç' },
    { command: '/renamecategory', description: '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' },
    { command: '/deletecategory', description: '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é' },
    { command: '/settings', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
])

const inst = axios.create({
    baseURL: "https://belarusbank.by/api",
    headers: {
        "Content-Type": "application/json"
    }
})

const getBaseRates = async () => {
    return await inst.get(`/kursExchange?city=%D0%9D%D0%B5%D1%81%D0%B2%D0%B8%D0%B6`).then((response) => response.data)
}

let sheet, amount, categoryText, operationStatus

const date = formatDate(new Date())

bot.on('message', async (msg) => {

    const { text } = msg
    const { id: chatId } = msg.chat
    const { first_name: firstName } = msg.from
    const { message_id } = msg
    const { username } = msg.from

    const lastRate = (await getBaseRates())[0]
    const defaultRate = ratesToString(defaultRates(filterRate(lastRate)))

    await doc.useServiceAccountAuth({
        client_email: moneyKeepEmail,
        private_key: moneyKeepKey.replace(/\\n/g, '\n'),
    })

    await doc.loadInfo()

    const found = doc.sheetsByIndex.find(element => element['_rawProperties']['title'] == chatId)
    const header = ['–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–î–∞—Ç–∞', '–û—Å—Ç–∞–ª—å–Ω–æ–µ', '–°—Ç–∞—Ç—É—Å']

    if (!found) {
        sheet = await doc.addSheet({ title: `${chatId}`, headerValues:  header})
        await sheet.addRow({ '–°—É–º–º–∞': '=–°–£–ú–ú(A3:A1000)', '–î–∞—Ç–∞': '=SUMIF(A3:A1000,"<0")', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '=SUMIF(A3:A1000,">0")', '–û—Å—Ç–∞–ª—å–Ω–æ–µ': `=SUMIF(C3:C1000, "<${date}",A3:A1000)`, '–°—Ç–∞—Ç—É—Å': false })
        bot.sendMessage(adminId, `–ö—Ç–æ-—Ç–æ –Ω–æ–≤—ã–π :)\n${firstName} - @${username}`)
    } else {
        sheet = doc.sheetsByIndex[found['_rawProperties']['index']]
    }

    const rows = await sheet.getRows()

    const setUserStatus = (status, statistic = '–ù–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ.') => {
        rows[0]['_rawData'][0] = '=–°–£–ú–ú(A3:A1000)'
        rows[0]['_rawData'][1] = '=SUMIF(A3:A1000,"<0")'
        rows[0]['_rawData'][2] = '=SUMIF(A3:A1000,">0")'
        rows[0]['_rawData'][3] = statistic
        rows[0]['_rawData'][4] = status
    }

    try {

        const listOfCategory = []

        if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
            setUserStatus(false)
            await rows[0].save()
            return bot.sendMessage(chatId, '–û—Ç–º–µ–Ω–µ–Ω–æ.', defaultOpts)
        }

        // ---------------------–ê–î–ú–ò–ù–ö–ê-------------------------

        const adminOpts = {
            parse_mode: 'HTML',
            reply_markup: {
                resize_keyboard: true,
                one_time_keyboard: true,
                keyboard: [[`–æ—Ç–≤–µ—Ç`]]
            }
        }

        if (rows[0]['_rawData'][4] === 'review') {
            bot.sendMessage(adminId, `–û—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç ${firstName}(${chatId}) - @${msg.from.username}\n\n${text}`, adminOpts)
            setUserStatus(false)
            await rows[0].save()

            bot.sendMessage(adminId, `<pre>${chatId} - </pre>`, adminOpts)

            return bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!`)
        }
        if (text === '–æ—Ç–≤–µ—Ç' && chatId == adminId) {
            setUserStatus('answer')
            await rows[0].save()
            return
        }
        if (rows[0]['_rawData'][4] === 'answer') {
            const userId = text.substring(0, text.indexOf(' - '))
            const answer = text.substring(text.indexOf(' - ') + 3)
            setUserStatus(false)
            await rows[0].save()
            return bot.sendMessage(userId, `\u2709 –û—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤:\n\n${answer}`, defaultOpts)
        }

        // -----------------------------------------------------

        rows.forEach(element => {
            if (!listOfCategory.includes(element['_rawData'][1])) {
                listOfCategory.push(element['_rawData'][1])
            }
        })

        listOfCategory.shift()

        const userCategoryList = listOfCategory.filter((n) => { return n != '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' && n != 'undefined'}).map((category) => [category])
        userCategoryList.push(['–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'])

        const userName = firstName

        const botAnswer = {
            userName,
            '/start': start(userName),
            '/rate': `–ö—É—Ä—Å –Ω–∞ ${formatToStandartDate(date)}\n\n<pre>${defaultRate}</pre>\n\n–ï—Å–ª–∏ —Å –∫—É—Ä—Å–æ–º –ø—É—Å—Ç–æ, –ø—Ä–æ—à—É –≤–∏–Ω–∏—Ç—å Heroku, –Ω–µ –º–µ–Ω—è üëâüëà`,
            '/settings': settings(userName),
        }

        if (text in botAnswer) {
            let param = eval(text.substring(1) + 'Opts')
            return bot.sendMessage(chatId, botAnswer[text], param)
        } else if (text === '/deletecategory' || text === '/renamecategory') {
            let list = userCategoryList
            list.pop()
            list.push(['–û—Ç–º–µ–Ω–∞'])
            param = renamecategoryOpts(list)
            
            if (text === '/renamecategory') {

                setUserStatus('rename')
                await rows[0].save()

                return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å.', param)
            }
            setUserStatus('delete')
            await rows[0].save()

            return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.\n \u2757–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.', param)
        } else if (text[0] === '/') {
            return bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –Ω–µ –ø—Ä–∏–ø–æ–º–∏–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        }

        const balance = rows[0]['_rawData'][0]

        if (text === '–±–∞–ª–∞–Ω—Å' || text === '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ü§ë') {
            const profit = rows[0]['_rawData'][2]
            const spending = rows[0]['_rawData'][1]
            if (balance == 0) {
                bot.sendSticker(chatId, 'https://cdn.tlgrm.app/stickers/2ad/834/2ad8341a-31fd-36c7-9af3-10820cfcbe51/192/8.webp')
            }
            return bot.sendMessage(chatId, `–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É —Å–µ–π—á–∞—Å <b>${balance} —Ä—É–±</b>\n\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>${profit} —Ä—É–±</b>\n–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>${spending} —Ä—É–±</b>`, defaultOpts)
        }

        if (rows[0]['_rawData'][4] === 'delete') {
            setUserStatus(false)
            await rows[0].save()

            const flatUserCategoryList = userCategoryList.flat();

            if (flatUserCategoryList.includes(text)) {
                setUserStatus('delete')
                await rows[0].save()
                return bot.sendMessage(chatId, '–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
            }

            let remoteBalance = 0

            rows.forEach(element => {
                if (element['_rawData'][1] === text) {
                    remoteBalance += +element['_rawData'][0]
                    element['_rawData'][0] = 'undefined'
                    element['_rawData'][1] = 'undefined'
                    element['_rawData'][2] = 'undefined'
                    element['_rawData'][3] = -1
                    element['_rawData'][4] = -1
                    
                    element.save()
                }
            })

            return bot.sendMessage(chatId, `–£–¥–∞–ª–µ–Ω–æ. –ù–∞ —Ç–≤–æ–µ–º —Å—á–µ—Ç—É —Å–µ–π—á–∞—Å ${+balance - +remoteBalance} —Ä—É–±\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>${text}</b> –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`, defaultOpts)
        }

        if (rows[0]['_rawData'][4] === 'rename') {
            rows[0]['_rawData'][0] = '=–°–£–ú–ú(A3:A1000)'
            setUserStatus('finish-rename', text)
                await rows[0].save()

            const flatUserCategoryList = userCategoryList.flat();

            if (flatUserCategoryList.includes(text)) {
                setUserStatus('rename')
                await rows[0].save()
                bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/2c7/850/2c78501f-e097-3ef2-9e3c-eae75db54b58/192/40.webp')
                return bot.sendMessage(chatId, '–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
            }

            return bot.sendMessage(chatId, '–ù–∞ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?')
        }

        if (rows[0]['_rawData'][4] === 'finish-rename') {
            let renamedCategory = rows[0]['_rawData'][3]
            setUserStatus(false)
            await rows[0].save()

            rows.forEach(element => {
                if (element['_rawData'][1] === renamedCategory) {
                    
                    element['_rawData'][1] = text

                    let dateForTable = element['_rawData'][2]
                    let fI = dateForTable.indexOf('/')
                    let lI = dateForTable.lastIndexOf('/')

                    element['_rawData'][3] = `=DATEDIF(DATE(${dateForTable.substr(lI+1)}, ${dateForTable.substr(0, fI)}, ${dateForTable.substr(fI+1, lI-2)}), TODAY(), "D")`
                    element['_rawData'][4] = `=DATEDIF(DATE(${dateForTable.substr(lI+1)}, ${dateForTable.substr(0, fI)}, ${dateForTable.substr(fI+1, lI-2)}), TODAY(), "M")`
                    element.save()
                }
            })

            return bot.sendMessage(chatId, `\u2705 –ì–æ—Ç–æ–≤–æ.\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>${renamedCategory}</b> –±—ã–ª–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>${text}</b>`, defaultOpts)
        }

        if (text === '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' || text === '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä') {

            setUserStatus('statistics', '—Ö–∑ –ø–æ–∫–∞')
            await rows[0].save()
            return bot.sendMessage(chatId, '–ü–µ—Ä–∏–æ–¥?', statisticOpts)   
        }

        if (rows[0]['_rawData'][4] === 'statistics') {

            const period = {
                '–¥–µ–Ω—å': { 'formula': 'TODAY()-1', 'distric': 0 },
                '–Ω–µ–¥–µ–ª—è': { 'formula': 'TODAY()-8', 'distric': 8 },
                '–º–µ—Å—è—Ü': { 'formula': 'EDATE(TODAY(),-1)', 'distric': 0 },
                '–≥–æ–¥': { 'formula': 'EOMONTH(TODAY(),-1)', 'distric': 12 },
                '–≤—Å—ë –≤—Ä–µ–º—è': { 'formula': '0', 'distric': Infinity },
            }

            const statAnswObj = {}
            let statAnswer = ``

            if (!period[text.toLowerCase()]) {
                return bot.sendMessage(chatId, '–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ "–û—Ç–º–µ–Ω–∞"')
            }

            rows.forEach(element => {
                let cell = (text.toLowerCase() === '–¥–µ–Ω—å' || text.toLowerCase() === '–Ω–µ–¥–µ–ª—è') ? 3 : 4

                if (element['_rawData'][cell] <= period[text.toLowerCase()]?.['distric'] && element['_rawData'][cell] != -1) {
                    statAnswer += `<b>${formatToStandartDate(element['_rawData'][2])}: ${element['_rawData'][0]} —Ä—É–± </b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>${element['_rawData'][1]}</b>\n`
                    if (!statAnswObj[element['_rawData'][1]]) {
                        statAnswObj[element['_rawData'][1]] = 0
                    }

                    statAnswObj[element['_rawData'][1]] += +element['_rawData'][0]
                }

            })

            statAnswer += '\n–ò—Ç–æ–≥–æ:\n\n'

            for (key in statAnswObj) {
                statAnswer += `<b>${key}</b>: <b>${statAnswObj[key]}</b> —Ä—É–±\n`
            }

            setUserStatus(false, `=SUMIF(C3:C1000,">"&${period[text.toLowerCase()]['formula']},A3:A1000)`)

            await rows[0].save()

            if (isEmpty(statAnswObj)) {
                return bot.sendMessage(chatId, '–ù–µ –∏–∑ —á–µ–≥–æ –ø–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–ª–∞—Ç—å...', defaultOpts)
            }

            return bot.sendMessage(chatId, `–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è:\n\n${statAnswer}\n–í—Å–µ–≥–æ: ${rows[0]['_rawData'][3]} —Ä—É–±`, defaultOpts)
        }

        if (text === '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ ‚ûï' || text === '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ ‚ûñ') {

            setUserStatus('addAmount', `–ù–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –µ—â—ë`)
            await rows[0].save()

            operationStatus = '-'

            if (text === '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ ‚ûï') {
                operationStatus = '+'
            }
            return bot.sendMessage(chatId, `–í–≤–µ–¥–∏ —Å—É–º–º—É`)
        }

        if (rows[0]['_rawData'][4] === 'addAmount') {

            // –∏ –∑–¥–µ—Å—å
            setUserStatus('addCategory', `–ù–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –µ—â—ë`)

            await rows[0].save()

            let exp = text.replace(/[,]/, '.')
            if (!+exp) {
                setUserStatus('addAmount', `–ù–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –µ—â—ë`)

                await rows[0].save()
                return bot.sendMessage(chatId, '–ë—É–¥—å –¥–æ–±—Ä, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ..')
            }
            amount = (+exp).toFixed(2)
            amount = (Math.abs(amount))
            if (operationStatus === '-') {
                amount = (+amount * -1).toFixed(2)
            }

            if (Math.abs(+amount) > 100000000) {
                setUserStatus('addAmount', `–ù–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –µ—â—ë`)

                await rows[0].save()
                bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/2ad/834/2ad8341a-31fd-36c7-9af3-10820cfcbe51/192/13.webp')
                return bot.sendMessage(chatId, '–í–æ—Ç —ç—Ç–æ —Ü–µ–Ω—ã –≤ –ë–µ–ª–∞—Ä—É—Å–∏ –∫–æ–Ω–µ—á–Ω–æ..')
            }

            return bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—é.`, categoryOpts(userCategoryList))
        }
        if (rows[0]['_rawData'][4] === 'addCategory') {
            let categoryText = text
            amount = '' + amount
            await sheet.addRow({ '–°—É–º–º–∞': amount, '–î–∞—Ç–∞': date, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': categoryText, '–û—Å—Ç–∞–ª—å–Ω–æ–µ': `=DATEDIF(DATE(${new Date().getFullYear()}, ${new Date().getMonth() + 1}, ${new Date().getDate()}), TODAY(), "D")`, '–°—Ç–∞—Ç—É—Å': `=DATEDIF(DATE(${new Date().getFullYear()}, ${new Date().getMonth() + 1}, ${new Date().getDate()}), TODAY(), "M")` })
            setUserStatus(false, `–ù–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ –µ—â—ë`)

                await rows[0].save()
            if ((+balance + +amount) < 0) {
                bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/2c7/850/2c78501f-e097-3ef2-9e3c-eae75db54b58/192/20.webp')
                bot.sendMessage(chatId, `–ö–∞–∂–∏—Å—å —Ç—ã —É—à—ë–ª –≤ –º–∏–Ω—É—Å..\n`)
            }
            return bot.sendMessage(chatId, `C–æ—Ö—Ä–∞–Ω–µ–Ω–æ \u2705\n\n<b>${amount} —Ä—É–±</b> –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>${categoryText}</b>\n-----------------------------\n–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É —Å–µ–π—á–∞—Å ${(+balance + +amount).toFixed(2)} —Ä—É–±`, defaultOpts)
        }

        const regexp = /[^ +-//*\d]/g
        const indexOfLetter = regexp.exec(text)?.index

        const expressionString = text.substring(0, indexOfLetter).replace(/[,]/, '.')

        amount = undefined
        categoryText = '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'

        if (expressionString) {
            amount = eval(expressionString).toFixed(2)
        }

        if (indexOfLetter) {
            categoryText = text.substring(indexOfLetter)
        }

        if (amount) {

            if (+amount === 0) {
                bot.sendSticker(chatId, 'https://tlgrm.eu/_/stickers/ac7/5e3/ac75e3f5-5369-3e8b-bc19-d61a67d43bd8/1.webp')
                return bot.sendMessage(chatId, '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—ã—Ä —Ç–æ–ª—å–∫–æ –≤ –º—ã—à–µ–ª–æ–≤–∫–µ!')
            }
            if (Math.abs(amount) > 100000000) {
                bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/2ad/834/2ad8341a-31fd-36c7-9af3-10820cfcbe51/192/13.webp')
                return bot.sendMessage(chatId, '–í–æ—Ç —ç—Ç–æ —Ü–µ–Ω—ã –≤ –ë–µ–ª–∞—Ä—É—Å–∏ –∫–æ–Ω–µ—á–Ω–æ..')
            }

            if (amount) {
                await sheet.addRow({ '–°—É–º–º–∞': amount, '–î–∞—Ç–∞': date, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': categoryText, '–û—Å—Ç–∞–ª—å–Ω–æ–µ': `=DATEDIF(DATE(${new Date().getFullYear()}, ${new Date().getMonth() + 1}, ${new Date().getDate()}), TODAY(), "D")`, '–°—Ç–∞—Ç—É—Å': `=DATEDIF(DATE(${new Date().getFullYear()}, ${new Date().getMonth() + 1}, ${new Date().getDate()}), TODAY(), "M")` })

                return bot.sendMessage(chatId, `C–æ—Ö—Ä–∞–Ω–µ–Ω–æ \u2705\n\n<b>${amount} —Ä—É–±</b>. –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>${categoryText}</b>\n-----------------------------\n–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É —Å–µ–π—á–∞—Å ${(+balance + +amount).toFixed(2)} —Ä—É–±`, defaultOpts)
            }
        }
        return bot.sendMessage(chatId, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é', defaultOpts)
    } catch (err) {
        console.log(err);
        return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞..', defaultOpts)
    }
})

bot.on('callback_query', async msg => {
    const { data } = msg
    const { message: { chat: { id: chatId } } } = msg
    const { message: { message_id } } = msg

    const setUserStatus = (status, statistic = '–ù–µ –ø–æ—Å—á–∏—Ç–∞–Ω–æ.') => {
        rows[0]['_rawData'][0] = '=–°–£–ú–ú(A3:A1000)'
        rows[0]['_rawData'][1] = '=SUMIF(A3:A1000,"<0")'
        rows[0]['_rawData'][2] = '=SUMIF(A3:A1000,">0")'
        rows[0]['_rawData'][3] = statistic
        rows[0]['_rawData'][4] = status
    }

    await doc.useServiceAccountAuth({
        client_email: moneyKeepEmail,
        private_key: moneyKeepKey.replace(/\\n/g, '\n'),
    })

    await doc.loadInfo()

    const found = doc.sheetsByIndex.find(element => element['_rawProperties']['title'] == chatId)

    if (!found) {
        sheet = await doc.addSheet({ title: `${chatId}`, headerValues: ['–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–î–∞—Ç–∞', '–û—Å—Ç–∞–ª—å–Ω–æ–µ', '–°—Ç–∞—Ç—É—Å'] })
        await sheet.addRow({ '–°—É–º–º–∞': '=–°–£–ú–ú(A3:A1000)', '–î–∞—Ç–∞': '=SUMIF(A3:A1000,"<0")', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '=SUMIF(A3:A1000,">0")', '–û—Å—Ç–∞–ª—å–Ω–æ–µ': `=SUMIF(C3:C1000, "<${date}",A3:A1000)`, '–°—Ç–∞—Ç—É—Å': false })
        bot.sendMessage(adminId, `–ö—Ç–æ-—Ç–æ –Ω–æ–≤—ã–π :)\n${firstName} - @${username}`)
    } else {
        sheet = doc.sheetsByIndex[found['_rawProperties']['index']]
    }

    const rows = await sheet.getRows()

    if (data === 'start') {
        setUserStatus(false)
        await rows[0].save()
        bot.editMessageText(`üëá –≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ <b>–º–µ–Ω—é</b>`,
            { chat_id: chatId, message_id: msg.message.message_id, parse_mode: 'HTML' })
        return bot.sendMessage(chatId, shortStart(), defaultOpts)
    }

    if (data === 'toMe') {
        setUserStatus('review')
        await rows[0].save()

        bot.editMessageText(`üñã –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ`,
            { chat_id: chatId, message_id: msg.message.message_id })
        return bot.sendMessage(chatId, '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –û—Ç–º–µ–Ω–∞ –∏ —è –æ—Ç–º–µ–Ω—é –¥–∏–∞–ª–æ–≥.')
    }
})